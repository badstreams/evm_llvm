//===-- EVMISelDAGToDAG.cpp - A dag to dag inst selector for EVM ------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the EVM target.
//
//===----------------------------------------------------------------------===//

#include "MCTargetDesc/EVMMCTargetDesc.h"
#include "EVM.h"
#include "EVMTargetMachine.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/MathExtras.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

#define DEBUG_TYPE "evm-isel"

// EVM-specific code to select EVM machine instructions for
// SelectionDAG operations.
namespace {
class EVMDAGToDAGISel final : public SelectionDAGISel {
  const EVMSubtarget *Subtarget;

public:
  explicit EVMDAGToDAGISel(EVMTargetMachine &TargetMachine)
      : SelectionDAGISel(TargetMachine) {}

  StringRef getPassName() const override {
    return "EVM DAG->DAG Pattern Instruction Selection";
  }

  bool runOnMachineFunction(MachineFunction &MF) override {
    Subtarget = &MF.getSubtarget<EVMSubtarget>();
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

  void PostprocessISelDAG() override;

  void Select(SDNode *Node) override;

// Include the pieces autogenerated from the target description.
#include "EVMGenDAGISel.inc"

private:
};
}

void EVMDAGToDAGISel::PostprocessISelDAG() {

}

void EVMDAGToDAGISel::Select(SDNode *Node) {
  llvm_unreachable("unimplemented.");
}

// This pass converts a legalized DAG into a EVM-specific DAG, ready
// for instruction scheduling.
FunctionPass *llvm::createEVMISelDag(EVMTargetMachine &TM) {
  return new EVMDAGToDAGISel(TM);
}
