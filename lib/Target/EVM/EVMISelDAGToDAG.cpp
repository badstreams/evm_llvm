//===-- EVMISelDAGToDAG.cpp - A dag to dag inst selector for EVM ------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the EVM target.
//
//===----------------------------------------------------------------------===//

#include "MCTargetDesc/EVMMCTargetDesc.h"
#include "EVM.h"
#include "EVMTargetMachine.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/MathExtras.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

#define DEBUG_TYPE "evm-isel"

// EVM-specific code to select EVM machine instructions for
// SelectionDAG operations.
namespace {
class EVMDAGToDAGISel final : public SelectionDAGISel {
  const EVMSubtarget *Subtarget;

public:
  explicit EVMDAGToDAGISel(EVMTargetMachine &TargetMachine)
      : SelectionDAGISel(TargetMachine) {}

  StringRef getPassName() const override {
    return "EVM DAG->DAG Pattern Instruction Selection";
  }

  bool runOnMachineFunction(MachineFunction &MF) override {
    Subtarget = &MF.getSubtarget<EVMSubtarget>();
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

  void PostprocessISelDAG() override;

  void Select(SDNode *Node) override;

  bool SelectAddrFI(SDValue Addr, SDValue &Base, SDValue &Offset);

// Include the pieces autogenerated from the target description.
#include "EVMGenDAGISel.inc"

private:
};
}

void EVMDAGToDAGISel::PostprocessISelDAG() {

}

void EVMDAGToDAGISel::Select(SDNode *Node) {
  unsigned Opcode = Node->getOpcode();

  // If we have a custom node, we already have selected!
  if (Node->isMachineOpcode()) {
    LLVM_DEBUG(dbgs() << "== "; Node->dump(CurDAG); dbgs() << '\n');
    return;
  }

  switch (Opcode) {
    case EVMISD::ARGUMENT:
      // do not select argument.
      return;
    case ISD::LOAD: {
      const LoadSDNode *LD = cast<LoadSDNode>(Node);

      // select loading from call arguments.
      if (LD->getBasePtr()->getOpcode() != ISD::FrameIndex) {
        break;
      }

      const SDValue fi = LD->getBasePtr();
      SDValue Chain = LD->getChain();

      SDValue move = CurDAG->getNode(EVMISD::MOVE,
                     SDLoc(Node), LD->getValueType(0), LD->getBasePtr());

      LLVM_DEBUG(dbgs() << "  Selecting node to: "; move->dump(CurDAG););
      ReplaceNode(Node, move.getNode());
      return;
    }
    case ISD::STORE: {
      const StoreSDNode *ST = cast<StoreSDNode>(Node);

      if (ST->getBasePtr()->getOpcode() != ISD::FrameIndex) {
        break;
      }
      SDValue BasePtr = ST->getBasePtr();
      SDValue Chain = ST->getChain();

      SDValue move = CurDAG->getNode(EVMISD::MOVE,
                     SDLoc(Node), MVT::Other, ST->getBasePtr(), ST->getValue());

      //SDValue set = CurDAG->getCopyToReg(Chain, DL, ST->getBasePtr(), ST->getValue()


      LLVM_DEBUG(dbgs() << "  Selecting node to: "; move->dump(CurDAG););
      ReplaceNode(Node, move.getNode());
      return;
    }
    case ISD::FrameIndex: {
      int FI = cast<FrameIndexSDNode>(Node)->getIndex();
      EVT VT = Node->getValueType(0);
      SDValue TFI = CurDAG->getTargetFrameIndex(FI, VT);
      unsigned Opc = ISD::TargetFrameIndex;
      ReplaceNode(Node, CurDAG->getMachineNode(Opc, SDLoc(Node), VT, TFI));
      return;
    }
  }


  SelectCode(Node);
}

bool EVMDAGToDAGISel::SelectAddrFI(SDValue Addr, SDValue &Base, SDValue &Offset) {
  if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
    Base = CurDAG->getTargetFrameIndex(
        FIN->getIndex(), TLI->getPointerTy(CurDAG->getDataLayout()));
    Offset = CurDAG->getTargetConstant(0, SDLoc(Addr), MVT::i256);
    return true;
  }
  return false;
}

// This pass converts a legalized DAG into a EVM-specific DAG, ready
// for instruction scheduling.
FunctionPass *llvm::createEVMISelDag(EVMTargetMachine &TM) {
  return new EVMDAGToDAGISel(TM);
}
